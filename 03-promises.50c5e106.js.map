{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,mBAChCC,EAAUF,SAASC,cAAc,SAEvCF,EAAOI,iBAAiB,SAExB,SAAyBC,GACzBA,EAAIC,iBACJ,IAAMC,EAAW,IAAIC,SAASL,GACxBM,EAAQF,EAASG,IAAI,SACrBC,EAAOJ,EAASG,IAAI,QACpBE,EAASL,EAASG,IAAI,UACxBG,EAAQ,EACZC,YAAW,WACT,IAAIC,EAAaC,aAAY,SAACC,EAAUC,GAEtC,GAAIL,EAAQD,EAaV,OAXAC,GAAS,OAuBf,SAAuBI,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAACN,WAAUC,UAGnBM,EAAO,CAACP,WAAUC,S,IA7BlBO,CAAcR,EAAUC,GACvBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARV,SAAUY,EAAKF,EAALT,MACjBY,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,OAC1D/B,EAAAmC,OAAOC,QAAQ,uBAAwCF,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE9DM,OAAM,SAAAR,G,IAAGC,EAAQD,EAARV,SAAUY,EAAKF,EAALT,MAElBY,QAAQC,IAAI,sBAAuCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,OACzD/B,EAAAmC,OAAOG,QAAQ,sBAAqCJ,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAI9DQ,cAActB,E,GAEdJ,E,GAGFF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btnRef = document.querySelector('.js-promise-btn');\nconst formRef = document.querySelector('.form');\n\nbtnRef.addEventListener('click', onCreatePromise);\n\nfunction onCreatePromise(evt) {\nevt.preventDefault();\nconst formData = new FormData(formRef);\nconst delay = formData.get(\"delay\");\nconst step = formData.get(\"step\");\nconst amount = formData.get(\"amount\");\nlet count = 0;\nsetTimeout(()=>{\n  let intervalId = setInterval((position, delay)=>{\n  \n    if (count < amount)\n    {\n      count += 1;\n      createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n  \n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n      return;\n    }\n    clearInterval(intervalId);\n  \n  },step)\n}\n\n, delay)\n\n\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject)=> {\n    if (shouldResolve) {\n      resolve({position, delay});\n      // Fulfill\n    } else {\n      reject({position, delay});\n      // Reject\n    }\n  })\n  \n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$btnRef","document","querySelector","$ce04d3a99e08e73b$var$formRef","addEventListener","evt","preventDefault","formData","FormData","delay1","get","step","amount","count","setTimeout","intervalId","setInterval","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","console","log","concat","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.50c5e106.js.map"}